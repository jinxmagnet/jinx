import{_ as e,o as c,c as t,R as o}from"./chunks/framework.ka86hsJC.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/backend/CPP/QT/1.元对象系统.md","filePath":"articles/backend/CPP/QT/1.元对象系统.md","lastUpdated":1701151124000}'),a={name:"articles/backend/CPP/QT/1.元对象系统.md"},d=o('<h2 id="qobject类" tabindex="-1">QObject类 <a class="header-anchor" href="#qobject类" aria-label="Permalink to &quot;QObject类&quot;">​</a></h2><ul><li>元对象<code>meta object</code>：每个<code>QObject</code>及其子类的实例都有一个元对象（静态变量<code>staticMetaObject</code>）。函数<code>metaObject()</code>可以返回它的指针。</li><li>类型信息：<code>QObject</code>的<code>inherits()</code>函数可以判断继承关系</li><li>动态翻译：函数<code>tr()</code>返回一个字符串的翻译版本</li><li>对象树：表示对象间从属关系的树状结构，<code>QObject</code>提供了<code>parent()、children()、findChildren()</code>等函数，对象树中的某个对象被删除时，它的子对象也将被删除。</li><li>信号和槽：对象间的通信机制</li><li>属性系统：可以使用宏<code>Q_PROPERTY</code>定义属性，<code>QObject</code>的<code>setProperty()</code>会设置属性的值或定义动态属性，<code>property</code>函数会返回属性的值。</li></ul><h2 id="qmetaobject类" tabindex="-1">QMetaObject类 <a class="header-anchor" href="#qmetaobject类" aria-label="Permalink to &quot;QMetaObject类&quot;">​</a></h2><p>元对象是对类的描述，包含类信息、方法、属性等元数据。<code>QObject</code>和<code>QMetaObject</code>提供了一些函数接口，可以获取运行时类型信息，类似标准<code>C++</code>库中的<code>RTTI(runtime type information)</code></p>',4),i=[d];function r(l,n,_,s,b,h){return c(),t("div",null,i)}const m=e(a,[["render",r]]);export{j as __pageData,m as default};
